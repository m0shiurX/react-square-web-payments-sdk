{"version":3,"file":"google-pay.es.mjs","sources":["../../../src/components/google-pay/google-pay.tsx"],"sourcesContent":["// Dependencies\r\nimport { useState, useRef, useMemo, useEffect, JSX } from 'react';\r\nimport type * as Square from '@square/web-sdk';\r\n\r\n// Internals\r\nimport { useForm } from '~/contexts/form';\r\nimport { useEventListener } from '~/hooks/use-event-listener';\r\nimport { ButtonLoader } from './google-pay.styles';\r\nimport type { GooglePayProps } from './google-pay.types';\r\nimport React from 'react';\r\n\r\n/**\r\n * Renders a Google Pay button to use in the Square Web Payment SDK, pre-styled\r\n * to meet Google's branding guidelines.\r\n *\r\n * **Remember** that you need to set `createPaymentRequest()` in `SquareForm` if\r\n * you going to use this Payment Method\r\n *\r\n * @example\r\n *\r\n * ```tsx\r\n * function App() {\r\n *   return (\r\n *     <SquareForm {...props}>\r\n *       <GooglePay />\r\n *     </SquareForm>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst GooglePay = ({\r\n  buttonColor,\r\n  buttonSizeMode = 'fill',\r\n  buttonType = 'long',\r\n  id = 'rswps-google-pay-container',\r\n  ...props\r\n}: GooglePayProps): JSX.Element | null => {\r\n  const [googlePay, setGooglePay] = useState<Square.GooglePay | undefined>(() => undefined);\r\n  const { cardTokenizeResponseReceived, createPaymentRequest, payments } = useForm();\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const options: Square.GooglePayButtonOptions = useMemo(() => {\r\n    const baseOptions = {\r\n      buttonColor,\r\n      buttonSizeMode,\r\n      buttonType,\r\n    };\r\n\r\n    // if a value from options is undefined delete it from the options object\r\n    return Object.keys(baseOptions).reduce((acc: Record<string, unknown>, key) => {\r\n      if (baseOptions[key as keyof typeof baseOptions] !== undefined) {\r\n        acc[key as string] = baseOptions[key as keyof typeof baseOptions];\r\n      }\r\n\r\n      return acc;\r\n    }, {});\r\n  }, [buttonColor, buttonSizeMode, buttonType]);\r\n\r\n  /**\r\n   * Handle the on click of the Google Pay button click\r\n   *\r\n   * @param e An event which takes place in the DOM.\r\n   * @returns The data be sended to `cardTokenizeResponseReceived()` function, or an error\r\n   */\r\n  const handlePayment = async (e: Event) => {\r\n    e.stopPropagation();\r\n\r\n    if (!googlePay) {\r\n      console.warn('Google Pay button was clicked, but no Google Pay instance was found.');\r\n\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await googlePay.tokenize();\r\n\r\n      if (result.status === 'OK') {\r\n        return cardTokenizeResponseReceived(result);\r\n      }\r\n\r\n      let message = `Tokenization failed with status: ${result.status}`;\r\n      if (result?.errors) {\r\n        message += ` and errors: ${JSON.stringify(result?.errors)}`;\r\n\r\n        throw new Error(message);\r\n      }\r\n\r\n      console.warn(message);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!createPaymentRequest) {\r\n      throw new Error('`createPaymentRequest()` is required when using digital wallets');\r\n    }\r\n\r\n    const abortController = new AbortController();\r\n    const { signal } = abortController;\r\n\r\n    const start = async (signal: AbortSignal) => {\r\n      const paymentRequest = payments?.paymentRequest(createPaymentRequest);\r\n\r\n      if (!paymentRequest) {\r\n        throw new Error('`paymentRequest` is required when using digital wallets');\r\n      }\r\n\r\n      try {\r\n        const googlePay = await payments?.googlePay(paymentRequest).then((res) => {\r\n          if (signal?.aborted) {\r\n            return;\r\n          }\r\n\r\n          setGooglePay(res);\r\n\r\n          return res;\r\n        });\r\n\r\n        await googlePay?.attach(`#${id}`, options);\r\n\r\n        if (signal.aborted) {\r\n          await googlePay?.destroy();\r\n        }\r\n      } catch (error) {\r\n        console.error('Initializing Google Pay failed', error);\r\n      }\r\n    };\r\n\r\n    start(signal);\r\n\r\n    return () => {\r\n      abortController.abort();\r\n    };\r\n  }, [createPaymentRequest, payments, options]);\r\n\r\n  useEventListener({\r\n    listener: handlePayment,\r\n    type: 'click',\r\n    element: containerRef.current,\r\n    options: {\r\n      passive: true,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div {...props} id={id} ref={containerRef}>\r\n      {!googlePay ? <ButtonLoader /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GooglePay;\r\nexport * from './google-pay.types';\r\n"],"names":["GooglePay","buttonColor","buttonSizeMode","buttonType","id","props","googlePay","setGooglePay","useState","cardTokenizeResponseReceived","createPaymentRequest","payments","useForm","containerRef","useRef","options","useMemo","baseOptions","acc","key","handlePayment","e","result","message","error","useEffect","abortController","signal","paymentRequest","res","useEventListener","React","ButtonLoader"],"mappings":";;;;AA8BA,MAAMA,IAAY,CAAC;AAAA,EACjB,aAAAC;AAAA,EACA,gBAAAC,IAAiB;AAAA,EACjB,YAAAC,IAAa;AAAA,EACb,IAAAC,IAAK;AAAA,EACL,GAAGC;AACL,MAA0C;AACxC,QAAM,CAACC,GAAWC,CAAY,IAAIC,EAAuC,MAAM;AAAA,GAAS,GAClF,EAAE,8BAAAC,GAA8B,sBAAAC,GAAsB,UAAAC,EAAA,IAAaC,EAAQ,GAC3EC,IAAeC,EAAuB,IAAI,GAE1CC,IAAyCC,EAAQ,MAAM;AAC3D,UAAMC,IAAc;AAAA,MAClB,aAAAhB;AAAA,MACA,gBAAAC;AAAA,MACA,YAAAC;AAAA,IACF;AAGA,WAAO,OAAO,KAAKc,CAAW,EAAE,OAAO,CAACC,GAA8BC,OAChEF,EAAYE,CAA+B,MAAM,WAC/CD,EAAAC,CAAa,IAAIF,EAAYE,CAA+B,IAG3DD,IACN,EAAE;AAAA,EACJ,GAAA,CAACjB,GAAaC,GAAgBC,CAAU,CAAC,GAQtCiB,IAAgB,OAAOC,MAAa;AAGxC,QAFAA,EAAE,gBAAgB,GAEd,CAACf,GAAW;AACd,cAAQ,KAAK,sEAAsE;AAEnF;AAAA,IAAA;AAGE,QAAA;AACI,YAAAgB,IAAS,MAAMhB,EAAU,SAAS;AAEpC,UAAAgB,EAAO,WAAW;AACpB,eAAOb,EAA6Ba,CAAM;AAGxC,UAAAC,IAAU,oCAAoCD,EAAO,MAAM;AAC/D,UAAIA,GAAQ;AACV,cAAAC,KAAW,gBAAgB,KAAK,UAAUD,GAAQ,MAAM,CAAC,IAEnD,IAAI,MAAMC,CAAO;AAGzB,cAAQ,KAAKA,CAAO;AAAA,aACbC,GAAO;AACd,cAAQ,MAAMA,CAAK;AAAA,IAAA;AAAA,EAEvB;AAEA,SAAAC,EAAU,MAAM;AACd,QAAI,CAACf;AACG,YAAA,IAAI,MAAM,iEAAiE;AAG7E,UAAAgB,IAAkB,IAAI,gBAAgB,GACtC,EAAE,QAAAC,MAAWD;AA8BnB,YA5Bc,OAAOC,MAAwB;AACrC,YAAAC,IAAiBjB,GAAU,eAAeD,CAAoB;AAEpE,UAAI,CAACkB;AACG,cAAA,IAAI,MAAM,yDAAyD;AAGvE,UAAA;AACItB,cAAAA,IAAY,MAAMK,GAAU,UAAUiB,CAAc,EAAE,KAAK,CAACC,MAAQ;AACxE,cAAIF,CAAAA,GAAQ;AAIZ,mBAAApB,EAAasB,CAAG,GAETA;AAAA,QAAA,CACR;AAED,cAAMvB,GAAW,OAAO,IAAIF,CAAE,IAAIW,CAAO,GAErCY,EAAO,WACT,MAAMrB,GAAW,QAAQ;AAAA,eAEpBkB,GAAO;AACN,gBAAA,MAAM,kCAAkCA,CAAK;AAAA,MAAA;AAAA,IAEzD,GAEMG,CAAM,GAEL,MAAM;AACX,MAAAD,EAAgB,MAAM;AAAA,IACxB;AAAA,EACC,GAAA,CAAChB,GAAsBC,GAAUI,CAAO,CAAC,GAE3Be,EAAA;AAAA,IACf,UAAUV;AAAA,IACV,MAAM;AAAA,IACN,SAASP,EAAa;AAAA,IACtB,SAAS;AAAA,MACP,SAAS;AAAA,IAAA;AAAA,EACX,CACD,GAGEkB,gBAAAA,EAAA,cAAA,OAAA,EAAK,GAAG1B,GAAO,IAAAD,GAAQ,KAAKS,EAC1B,GAACP,IAA+B,OAAnByB,gBAAAA,EAAA,cAACC,GAAa,IAAA,CAC9B;AAEJ;"}
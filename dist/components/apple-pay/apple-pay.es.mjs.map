{"version":3,"file":"apple-pay.es.mjs","sources":["../../../src/components/apple-pay/apple-pay.tsx"],"sourcesContent":["// Dependencies\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport type * as Square from '@square/web-sdk';\r\n\r\n// Internals\r\nimport { useForm } from '~/contexts/form';\r\nimport { useEventListener } from '~/hooks/use-event-listener';\r\nimport { ApplePayContainer } from './apple-pay.styles';\r\nimport type { ApplePayProps } from './apple-pay.types';\r\nimport React from 'react';\r\n\r\n/**\r\n * Renders a Apple Pay button to use in the Square Web Payment SDK, pre-styled\r\n * to meet Apple Pay's branding guidelines.\r\n *\r\n * **Remember** that you need to set `createPaymentRequest()` in `SquareForm` if\r\n * you going to use this Payment Method\r\n *\r\n * @example\r\n *\r\n * ```tsx\r\n * function App() {\r\n *   return (\r\n *     <SquareForm {...props}>\r\n *       <ApplePay />\r\n *     </SquareForm>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction ApplePay({ id = 'rswps-apple-pay', ...props }: ApplePayProps) {\r\n  const [applePay, setApplePay] = useState<Square.ApplePay | undefined>(() => undefined);\r\n  const { cardTokenizeResponseReceived, createPaymentRequest, payments } = useForm();\r\n  const containerRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n\r\n  /**\r\n   * Handle the on click of the Apple Pay button click\r\n   *\r\n   * @param e An event which takes place in the DOM.\r\n   * @returns The data be sended to `cardTokenizeResponseReceived()` function, or an error\r\n   */\r\n  const handlePayment = async (e: Event) => {\r\n    e.stopPropagation();\r\n\r\n    if (!applePay) {\r\n      console.warn('Apple Pay button was clicked, but no Apple Pay instance was found.');\r\n\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await applePay.tokenize();\r\n\r\n      if (result.status === 'OK') {\r\n        return cardTokenizeResponseReceived(result);\r\n      }\r\n\r\n      let message = `Tokenization failed with status: ${result.status}`;\r\n      if (result?.errors) {\r\n        message += ` and errors: ${JSON.stringify(result?.errors)}`;\r\n\r\n        throw new Error(message);\r\n      }\r\n\r\n      console.warn(message);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!createPaymentRequest) {\r\n      throw new Error('`createPaymentRequest()` is required when using digital wallets');\r\n    }\r\n\r\n    const abortController = new AbortController();\r\n    const { signal } = abortController;\r\n\r\n    const start = async (signal: AbortSignal) => {\r\n      const paymentRequest = payments?.paymentRequest(createPaymentRequest);\r\n\r\n      if (!paymentRequest) {\r\n        throw new Error('`paymentRequest` is required when using digital wallets');\r\n      }\r\n\r\n      try {\r\n        const applePay = await payments?.applePay(paymentRequest).then((res) => {\r\n          if (signal?.aborted) {\r\n            return;\r\n          }\r\n\r\n          setApplePay(res);\r\n\r\n          return res;\r\n        });\r\n\r\n        if (signal.aborted) {\r\n          await applePay?.destroy();\r\n        }\r\n      } catch (error) {\r\n        console.error('Initializing Apple Pay failed', error);\r\n      }\r\n    };\r\n\r\n    start(signal);\r\n\r\n    return () => {\r\n      abortController.abort();\r\n    };\r\n  }, [createPaymentRequest, payments]);\r\n\r\n  useEventListener({\r\n    listener: handlePayment,\r\n    type: 'click',\r\n    element: containerRef,\r\n    options: {\r\n      passive: true,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ApplePayContainer\r\n      {...props}\r\n      // We need to make this styles to be able to use event listener\r\n      css={{\r\n        display: applePay ? 'block' : 'none',\r\n        opacity: applePay ? 1 : 0.5,\r\n        pointerEvents: applePay ? 'auto' : 'none',\r\n        visibility: applePay ? 'visible' : 'hidden',\r\n      }}\r\n      id={id}\r\n      ref={containerRef}\r\n    ></ApplePayContainer>\r\n  );\r\n}\r\n\r\nexport default ApplePay;\r\nexport * from './apple-pay.types';\r\n"],"names":["ApplePay","id","props","applePay","setApplePay","useState","cardTokenizeResponseReceived","createPaymentRequest","payments","useForm","containerRef","useRef","handlePayment","e","result","message","error","useEffect","abortController","signal","paymentRequest","res","useEventListener","React","ApplePayContainer"],"mappings":";;;;AA8BA,SAASA,EAAS,EAAE,IAAAC,IAAK,mBAAmB,GAAGC,KAAwB;AACrE,QAAM,CAACC,GAAUC,CAAW,IAAIC,EAAsC,MAAM;AAAA,GAAS,GAC/E,EAAE,8BAAAC,GAA8B,sBAAAC,GAAsB,UAAAC,EAAA,IAAaC,EAAQ,GAC3EC,IAAeC,EAAuB,IAAI,GAQ1CC,IAAgB,OAAOC,MAAa;AAGxC,QAFAA,EAAE,gBAAgB,GAEd,CAACV,GAAU;AACb,cAAQ,KAAK,oEAAoE;AAEjF;AAAA,IAAA;AAGE,QAAA;AACI,YAAAW,IAAS,MAAMX,EAAS,SAAS;AAEnC,UAAAW,EAAO,WAAW;AACpB,eAAOR,EAA6BQ,CAAM;AAGxC,UAAAC,IAAU,oCAAoCD,EAAO,MAAM;AAC/D,UAAIA,GAAQ;AACV,cAAAC,KAAW,gBAAgB,KAAK,UAAUD,GAAQ,MAAM,CAAC,IAEnD,IAAI,MAAMC,CAAO;AAGzB,cAAQ,KAAKA,CAAO;AAAA,aACbC,GAAO;AACd,cAAQ,MAAMA,CAAK;AAAA,IAAA;AAAA,EAEvB;AAEA,SAAAC,EAAU,MAAM;AACd,QAAI,CAACV;AACG,YAAA,IAAI,MAAM,iEAAiE;AAG7E,UAAAW,IAAkB,IAAI,gBAAgB,GACtC,EAAE,QAAAC,MAAWD;AA4BnB,YA1Bc,OAAOC,MAAwB;AACrC,YAAAC,IAAiBZ,GAAU,eAAeD,CAAoB;AAEpE,UAAI,CAACa;AACG,cAAA,IAAI,MAAM,yDAAyD;AAGvE,UAAA;AACIjB,cAAAA,IAAW,MAAMK,GAAU,SAASY,CAAc,EAAE,KAAK,CAACC,MAAQ;AACtE,cAAIF,CAAAA,GAAQ;AAIZ,mBAAAf,EAAYiB,CAAG,GAERA;AAAA,QAAA,CACR;AAED,QAAIF,EAAO,WACT,MAAMhB,GAAU,QAAQ;AAAA,eAEnBa,GAAO;AACN,gBAAA,MAAM,iCAAiCA,CAAK;AAAA,MAAA;AAAA,IAExD,GAEMG,CAAM,GAEL,MAAM;AACX,MAAAD,EAAgB,MAAM;AAAA,IACxB;AAAA,EAAA,GACC,CAACX,GAAsBC,CAAQ,CAAC,GAElBc,EAAA;AAAA,IACf,UAAUV;AAAA,IACV,MAAM;AAAA,IACN,SAASF;AAAA,IACT,SAAS;AAAA,MACP,SAAS;AAAA,IAAA;AAAA,EACX,CACD,GAGCa,gBAAAA,EAAA;AAAA,IAACC;AAAA,IAAA;AAAA,MACE,GAAGtB;AAAA,MAEJ,KAAK;AAAA,QACH,SAASC,IAAW,UAAU;AAAA,QAC9B,SAASA,IAAW,IAAI;AAAA,QACxB,eAAeA,IAAW,SAAS;AAAA,QACnC,YAAYA,IAAW,YAAY;AAAA,MACrC;AAAA,MACA,IAAAF;AAAA,MACA,KAAKS;AAAA,IAAA;AAAA,EACN;AAEL;"}